// Generated by CoffeeScript 1.6.3
/*
This is Game Of Life
Author Rafael Cosman
*/


(function() {
  var ages, background, c, circle, context, createArray, draw, fillRect, fillStyle, gridHeight, gridWidth, makeNewGrid, restore, rules, save, translate;

  c = document.getElementById("myCanvas");

  context = c.getContext("2d");

  translate = function(x, y) {
    return context.translate(x, y);
  };

  fillRect = function(width, height) {
    return context.fillRect(0, 0, width, height);
  };

  circle = function(radius) {
    return context.arc(0, 0, radius, 0, 2 * Math.PI, false);
  };

  background = function() {
    var bigNum;
    bigNum = 100000;
    return context.fillRect(-bigNum, -bigNum, 2 * bigNum, 2 * bigNum);
  };

  fillStyle = function(string) {
    return context.fillStyle = string;
  };

  save = function() {
    return context.save();
  };

  restore = function() {
    return context.restore();
  };

  createArray = function(length) {
    var args, arr, i;
    arr = new Array(length || 0);
    i = length;
    if (arguments_.length > 1) {
      args = Array.prototype.slice.call(arguments_, 1);
      while (i--) {
        arr[length - 1 - i] = createArray.apply(this, args);
      }
    }
    return arr;
  };

  makeNewGrid = function() {
    var x, y, _i, _results;
    _results = [];
    for (x = _i = 0; 0 <= gridWidth ? _i < gridWidth : _i > gridWidth; x = 0 <= gridWidth ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (y = _j = 0; 0 <= gridHeight ? _j < gridHeight : _j > gridHeight; y = 0 <= gridHeight ? ++_j : --_j) {
          _results1.push(0);
        }
        return _results1;
      })());
    }
    return _results;
  };

  draw = function() {
    var numNeighbors, x, y, _i, _j, _k, _l, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
    numNeighbors = makeNewGrid();
    for (x = _i = 0, _ref = gridWidth - 1; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
      for (y = _j = 0, _ref1 = gridHeight - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
        if (ages[x][y] !== 0) {
          numNeighbors[x - 1][y - 1]++;
          numNeighbors[x - 1][y]++;
          numNeighbors[x - 1][y + 1]++;
          numNeighbors[x1][y - 1]++;
          numNeighbors[x1][y + 1]++;
          numNeighbors[x + 1][y - 1]++;
          numNeighbors[x + 1][y]++;
          numNeighbors[x + 1][y + 1]++;
        }
      }
    }
    for (x = _k = 0, _ref2 = gridWidth - 1; 0 <= _ref2 ? _k < _ref2 : _k > _ref2; x = 0 <= _ref2 ? ++_k : --_k) {
      for (y = _l = 0, _ref3 = gridHeight - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; y = 0 <= _ref3 ? ++_l : --_l) {
        if (rules[ages[x][y] !== 0][numNeighbors]) {
          ages[x][y]++;
        } else {
          ages[x][y] = 0;
        }
      }
    }
    background(0);
    for (x = _m = 0, _ref4 = gridWidth - 1; 0 <= _ref4 ? _m < _ref4 : _m > _ref4; x = 0 <= _ref4 ? ++_m : --_m) {
      for (y = _n = 0, _ref5 = gridHeight - 1; 0 <= _ref5 ? _n <= _ref5 : _n >= _ref5; y = 0 <= _ref5 ? ++_n : --_n) {
        save();
        translate(10 * x, 10 * y);
        if (ages[x][y] !== 0) {
          fillStyle("FFFF00");
          fillRect(5, 5);
        }
        restore();
      }
    }
    return setTimeout(draw, 1000);
  };

  gridWidth = 300;

  gridHeight = 300;

  context.shadowBlur = 20;

  ages = makeNewGrid();

  console.log(ages[0]);

  rules = [[false, false, false, true, false, false, false, false], [false, false, true, true, false, false, false, false]];

  draw();

}).call(this);
