// Generated by CoffeeScript 1.6.3
/*
This is Game Of Life
Author Rafael Cosman
This code is Maddy approved.
*/


(function() {
  var ages, background, border, buttonHeight, buttonWidth, canvas, computeNextGeneration, context, draw, drawCells, gridHeight, gridSpacing, gridWidth, makeNewGrid, mouseX, mouseY, randomGrid, randomizeGrid, root, rules;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  canvas = document.getElementById("myCanvas");

  context = canvas.getContext("2d");

  background = function() {
    var bigNum;
    bigNum = 100000;
    return context.fillRect(-bigNum, -bigNum, 2 * bigNum, 2 * bigNum);
  };

  makeNewGrid = function() {
    var x, y, _i, _results;
    _results = [];
    for (x = _i = 0; 0 <= gridWidth ? _i < gridWidth : _i > gridWidth; x = 0 <= gridWidth ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (y = _j = 0; 0 <= gridHeight ? _j < gridHeight : _j > gridHeight; y = 0 <= gridHeight ? ++_j : --_j) {
          _results1.push(0);
        }
        return _results1;
      })());
    }
    return _results;
  };

  this.clearGrid = function() {
    var x, y, _i, _results;
    _results = [];
    for (x = _i = 0; 0 <= gridWidth ? _i < gridWidth : _i > gridWidth; x = 0 <= gridWidth ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (y = _j = 0; 0 <= gridHeight ? _j < gridHeight : _j > gridHeight; y = 0 <= gridHeight ? ++_j : --_j) {
          _results1.push(ages[x][y] = 0);
        }
        return _results1;
      })());
    }
    return _results;
  };

  randomGrid = function() {
    var x, y, _i, _results;
    _results = [];
    for (x = _i = 0; 0 <= gridWidth ? _i < gridWidth : _i > gridWidth; x = 0 <= gridWidth ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (y = _j = 0; 0 <= gridHeight ? _j < gridHeight : _j > gridHeight; y = 0 <= gridHeight ? ++_j : --_j) {
          _results1.push(Math.floor(Math.random() + 0.4));
        }
        return _results1;
      })());
    }
    return _results;
  };

  randomizeGrid = function() {
    var x, y, _i, _results;
    _results = [];
    for (x = _i = 0; 0 <= gridWidth ? _i < gridWidth : _i > gridWidth; x = 0 <= gridWidth ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (y = _j = 0; 0 <= gridHeight ? _j < gridHeight : _j > gridHeight; y = 0 <= gridHeight ? ++_j : --_j) {
          _results1.push(ages[x][y] = Math.floor(Math.random() + 0.4));
        }
        return _results1;
      })());
    }
    return _results;
  };

  computeNextGeneration = function() {
    var numNeighbors, x, y, _i, _j, _k, _results;
    numNeighbors = makeNewGrid();
    for (x = _i = 0; 0 <= gridWidth ? _i < gridWidth : _i > gridWidth; x = 0 <= gridWidth ? ++_i : --_i) {
      for (y = _j = 0; 0 <= gridHeight ? _j < gridHeight : _j > gridHeight; y = 0 <= gridHeight ? ++_j : --_j) {
        if (ages[x][y] !== 0) {
          inc(numNeighbors, x - 1, y - 1);
          inc(numNeighbors, x - 1, y);
          inc(numNeighbors, x - 1, y + 1);
          inc(numNeighbors, x, y - 1);
          inc(numNeighbors, x, y + 1);
          inc(numNeighbors, x + 1, y - 1);
          inc(numNeighbors, x + 1, y);
          inc(numNeighbors, x + 1, y + 1);
        }
      }
    }
    _results = [];
    for (x = _k = 0; 0 <= gridWidth ? _k < gridWidth : _k > gridWidth; x = 0 <= gridWidth ? ++_k : --_k) {
      _results.push((function() {
        var _l, _results1;
        _results1 = [];
        for (y = _l = 0; 0 <= gridHeight ? _l < gridHeight : _l > gridHeight; y = 0 <= gridHeight ? ++_l : --_l) {
          if (rules[getBinaryThingey(ages[x][y])][numNeighbors[x][y]]) {
            _results1.push(ages[x][y]++);
          } else {
            _results1.push(ages[x][y] = 0);
          }
        }
        return _results1;
      })());
    }
    return _results;
  };

  drawCells = function() {
    var age, hue, timeModifier, x, y, _i, _results;
    timeModifier = new Date().getTime() / 10000;
    _results = [];
    for (x = _i = 0; 0 <= gridWidth ? _i < gridWidth : _i > gridWidth; x = 0 <= gridWidth ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (y = _j = 0; 0 <= gridHeight ? _j < gridHeight : _j > gridHeight; y = 0 <= gridHeight ? ++_j : --_j) {
          age = ages[x][y];
          if (age !== 0) {
            hue = Math.sqrt(age);
            hue *= 0.2;
            context.fillStyle = HSVtoRGB((hue + timeModifier) % 1, 1, 1);
            _results1.push(context.fillRect(gridSpacing * x, gridSpacing * y, gridSpacing - border, gridSpacing - border));
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      })());
    }
    return _results;
  };

  draw = function() {
    if (!root.paused) {
      computeNextGeneration();
    }
    context.fillStyle = rgb(0, 0, 0);
    background();
    drawCells();
    if (ages[mouse.getGridX()][mouse.getGridY()] !== 0) {
      context.fillStyle = rgba(255, 255, 255, 0.7);
      context.fillRect(mouse.getGridX() * gridSpacing, mouse.getGridY() * gridSpacing, gridSpacing - border, gridSpacing - border);
    }
    return setTimeout(draw, 0);
  };

  root.userHasCreatedCells = false;

  root.userHasChangedRules = false;

  root.userHasDeletedCells = false;

  setTimeout((function() {
    return setVisible("#tutorialCreateCells");
  }), 1000);

  canvas.width = window.innerWidth;

  canvas.height = window.innerHeight;

  buttonWidth = 50;

  buttonHeight = canvas.height / 9;

  gridSpacing = 15;

  border = 3;

  gridWidth = canvas.width / gridSpacing;

  gridHeight = canvas.width / gridSpacing;

  mouseX = 0;

  mouseY = 0;

  ages = randomGrid();

  rules = [[false, false, false, true, false, false, false, false, false], [false, false, true, true, false, false, false, false, false]];

  root.helpShown = false;

  root.paused = false;

  context.font = "20px Georgia";

  draw();

}).call(this);
